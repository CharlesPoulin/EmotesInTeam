@using EmotesForTeam.Model
@using EmotesForTeam.Services
@using Microsoft.AspNetCore.Components
@using EmotesForTeam.Model

@inherits ComponentBase

@if (cardViewModels != null && cardViewModels.Any())
{
    <div class="grid sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-x-100 gap-y-4">
        @foreach (var cardViewModel in cardViewModels) // Corrected from cardViewModel to cardViewModels
        {
            <div class="w-[202px] h-[259px] relative bg-white rounded-[6.7px] shadow-xl">
                <button style="cursor: pointer;" @onclick="() => ToggleFavorite(cardViewModel)">
                    <img src="@GetHeartImageUrl(cardViewModel.IsFavorite)" alt="Heart" />
                </button>

                <button class="w-[77px] h-7 left-[110px] top-[207px] absolute bg-blue-600 rounded-[6.7px] font-bold text-white hover:bg-gray-700 flex justify-center items-center">
                    Quick Add
                </button>

                <button class="w-[77px] h-7 left-[16px] top-[207px] absolute bg-indigo-900 rounded-[13.4px] text-white text-xs font-medium flex justify-center items-center">
                    Manage List
                </button>




                <div class="absolute top-[172px] w-full flex justify-center">
                    <p class="text-blue-600 font-medium">@cardViewModel.Card.Title</p>
                </div>

                <div class="w-[200px] h-[200px] absolute flex justify-center items-center">
                    <img src="@cardViewModel.Card.ImageUrl" alt="@cardViewModel.Card.Title" class="self-center max-w-auto h-auto" />
                </div>


            </div>

        }
    </div>


}
<div class="flex justify-between mt-4">
    <button @onclick="PreviousPage" class="btn-previous bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow" disabled="@IsFirstPage">Previous</button>
    <button @onclick="NextPage" class="btn-next bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow" disabled="@IsLastPage">Next</button>
</div>


@code {
    [Inject]
    protected CardService? CardService { get; set; }
    @inject Blazored.LocalStorage.ILocalStorageService LocalStorage

    private List<Card>? cards;
    private List<CardViewModel> cardViewModels;

    private const int PageSize = 30;
    private int CurrentPage { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadCards();
        await LoadFavorites();
    }

    private async Task LoadCards()
    {
        if (CardService != null)
        {
            cards = await CardService.GetCardsAsync(CurrentPage, PageSize);
            cardViewModels = cards.Select(card => new CardViewModel { Card = card }).ToList();
        }
    }

    private async Task NextPage()
    {
        CurrentPage++;
        await LoadCards();
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadCards();
        }
    }

    private bool IsFirstPage => CurrentPage <= 1;
    private bool IsLastPage => cards != null && cards.Count < PageSize;

    private bool isFavorite = false;

    private async Task ToggleFavorite(CardViewModel cardViewModel)
    {
        cardViewModel.IsFavorite = !cardViewModel.IsFavorite;

        // Save the updated list to local storage
        await LocalStorage.SetItemAsync("favorites", cardViewModels);
    }

    private async Task LoadFavorites()
    {
        var storedFavorites = await LocalStorage.GetItemAsync<List<CardViewModel>>("favorites");
        if (storedFavorites != null)
        {
            // Update the favorite state based on local storage
            foreach (var cardViewModel in cardViewModels)
            {
                var storedFavorite = storedFavorites.FirstOrDefault(c => c.Card.Id == cardViewModel.Card.Id);
                if (storedFavorite != null)
                {
                    cardViewModel.IsFavorite = storedFavorite.IsFavorite;
                }
            }
        }
    }
    private string GetHeartImageUrl(bool isFavorite)
    {
        return isFavorite ? "/Images/svg/heart-full.svg" : "/Images/svg/heart-empty.svg";
    }
}
